// @ts-nocheck
/* eslint-disable */

if ([] == false) { console.log(1) };
if ({} == false) { console.log(2) };
if ([]) { console.log(3) };
if ([1] == [1]) { console.log(4) };

/*
 * 考察点：== 运算
 * 相等运算符（==和!=）使用抽象相等比较算法比较两个操作数。可以大致概括如下：
 * 如果两个操作数都是对象，则仅当两个操作数都引用同一个对象时才返回true。
 * 如果一个操作数是null，另一个操作数是undefined，则返回true。
 * 如果两个操作数是不同类型的，就会尝试在比较之前将它们转换为相同类型：
 *   当数字与字符串进行比较时，会尝试将字符串转换为数字值。
 *   如果操作数之一是Boolean，则将布尔操作数转换为1或0。
 *   如果操作数之一是对象，另一个是数字或字符串，会尝试使用对象的valueOf()和toString()方法将对象转换为原始值。
 * 如果操作数具有相同的类型，则将它们进行如下比较：
 *   String：true仅当两个操作数具有相同顺序的相同字符时才返回。
 *   Number：true仅当两个操作数具有相同的值时才返回。+0并被-0视为相同的值。如果任一操作数为NaN，则返回false。
 *   Boolean：true仅当操作数为两个true或两个时才返回false。
 * 此运算符与严格等于（===）运算符之间最显着的区别在于，严格等于运算符不尝试类型转换。相反，严格相等运算符始终将不同类型的操作数视为不同。
 * -------------------- */